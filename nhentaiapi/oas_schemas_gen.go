// Code generated by ogen, DO NOT EDIT.

package nhentaiapi

import (
	"fmt"
	"io"
	"time"

	"github.com/go-faster/errors"
)

func (s *ErrorStatusCode) Error() string {
	return fmt.Sprintf("code %d: %+v", s.StatusCode, s.Response)
}

// Ref: #/components/schemas/Book
type Book struct {
	ID           BookID         `json:"id"`
	MediaID      string         `json:"media_id"`
	Images       Images         `json:"images"`
	Title        Title          `json:"title"`
	Tags         []Tag          `json:"tags"`
	Scanlator    OptString      `json:"scanlator"`
	UploadDate   OptUnixSeconds `json:"upload_date"`
	NumPages     OptInt         `json:"num_pages"`
	NumFavorites OptInt         `json:"num_favorites"`
}

// GetID returns the value of ID.
func (s *Book) GetID() BookID {
	return s.ID
}

// GetMediaID returns the value of MediaID.
func (s *Book) GetMediaID() string {
	return s.MediaID
}

// GetImages returns the value of Images.
func (s *Book) GetImages() Images {
	return s.Images
}

// GetTitle returns the value of Title.
func (s *Book) GetTitle() Title {
	return s.Title
}

// GetTags returns the value of Tags.
func (s *Book) GetTags() []Tag {
	return s.Tags
}

// GetScanlator returns the value of Scanlator.
func (s *Book) GetScanlator() OptString {
	return s.Scanlator
}

// GetUploadDate returns the value of UploadDate.
func (s *Book) GetUploadDate() OptUnixSeconds {
	return s.UploadDate
}

// GetNumPages returns the value of NumPages.
func (s *Book) GetNumPages() OptInt {
	return s.NumPages
}

// GetNumFavorites returns the value of NumFavorites.
func (s *Book) GetNumFavorites() OptInt {
	return s.NumFavorites
}

// SetID sets the value of ID.
func (s *Book) SetID(val BookID) {
	s.ID = val
}

// SetMediaID sets the value of MediaID.
func (s *Book) SetMediaID(val string) {
	s.MediaID = val
}

// SetImages sets the value of Images.
func (s *Book) SetImages(val Images) {
	s.Images = val
}

// SetTitle sets the value of Title.
func (s *Book) SetTitle(val Title) {
	s.Title = val
}

// SetTags sets the value of Tags.
func (s *Book) SetTags(val []Tag) {
	s.Tags = val
}

// SetScanlator sets the value of Scanlator.
func (s *Book) SetScanlator(val OptString) {
	s.Scanlator = val
}

// SetUploadDate sets the value of UploadDate.
func (s *Book) SetUploadDate(val OptUnixSeconds) {
	s.UploadDate = val
}

// SetNumPages sets the value of NumPages.
func (s *Book) SetNumPages(val OptInt) {
	s.NumPages = val
}

// SetNumFavorites sets the value of NumFavorites.
func (s *Book) SetNumFavorites(val OptInt) {
	s.NumFavorites = val
}

// Ref: #/components/schemas/BookID
// BookID represents sum type.
type BookID struct {
	Type   BookIDType // switch on this field
	Int    int
	String string
}

// BookIDType is oneOf type of BookID.
type BookIDType string

// Possible values for BookIDType.
const (
	IntBookID    BookIDType = "int"
	StringBookID BookIDType = "string"
)

// IsInt reports whether BookID is int.
func (s BookID) IsInt() bool { return s.Type == IntBookID }

// IsString reports whether BookID is string.
func (s BookID) IsString() bool { return s.Type == StringBookID }

// SetInt sets BookID to int.
func (s *BookID) SetInt(v int) {
	s.Type = IntBookID
	s.Int = v
}

// GetInt returns int and true boolean if BookID is int.
func (s BookID) GetInt() (v int, ok bool) {
	if !s.IsInt() {
		return v, false
	}
	return s.Int, true
}

// NewIntBookID returns new BookID from int.
func NewIntBookID(v int) BookID {
	var s BookID
	s.SetInt(v)
	return s
}

// SetString sets BookID to string.
func (s *BookID) SetString(v string) {
	s.Type = StringBookID
	s.String = v
}

// GetString returns string and true boolean if BookID is string.
func (s BookID) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringBookID returns new BookID from string.
func NewStringBookID(v string) BookID {
	var s BookID
	s.SetString(v)
	return s
}

type Error struct {
	Error string `json:"error"`
}

// GetError returns the value of Error.
func (s *Error) GetError() string {
	return s.Error
}

// SetError sets the value of Error.
func (s *Error) SetError(val string) {
	s.Error = val
}

// ErrorStatusCode wraps Error with StatusCode.
type ErrorStatusCode struct {
	StatusCode int
	Response   Error
}

// GetStatusCode returns the value of StatusCode.
func (s *ErrorStatusCode) GetStatusCode() int {
	return s.StatusCode
}

// GetResponse returns the value of Response.
func (s *ErrorStatusCode) GetResponse() Error {
	return s.Response
}

// SetStatusCode sets the value of StatusCode.
func (s *ErrorStatusCode) SetStatusCode(val int) {
	s.StatusCode = val
}

// SetResponse sets the value of Response.
func (s *ErrorStatusCode) SetResponse(val Error) {
	s.Response = val
}

type GetPageCoverImageOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPageCoverImageOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetPageCoverImageOKHeaders wraps GetPageCoverImageOK with response headers.
type GetPageCoverImageOKHeaders struct {
	ContentType string
	Response    GetPageCoverImageOK
}

// GetContentType returns the value of ContentType.
func (s *GetPageCoverImageOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *GetPageCoverImageOKHeaders) GetResponse() GetPageCoverImageOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *GetPageCoverImageOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *GetPageCoverImageOKHeaders) SetResponse(val GetPageCoverImageOK) {
	s.Response = val
}

type GetPageImageOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPageImageOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetPageImageOKHeaders wraps GetPageImageOK with response headers.
type GetPageImageOKHeaders struct {
	ContentType string
	Response    GetPageImageOK
}

// GetContentType returns the value of ContentType.
func (s *GetPageImageOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *GetPageImageOKHeaders) GetResponse() GetPageImageOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *GetPageImageOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *GetPageImageOKHeaders) SetResponse(val GetPageImageOK) {
	s.Response = val
}

type GetPageThumbnailImageOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s GetPageThumbnailImageOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// GetPageThumbnailImageOKHeaders wraps GetPageThumbnailImageOK with response headers.
type GetPageThumbnailImageOKHeaders struct {
	ContentType string
	Response    GetPageThumbnailImageOK
}

// GetContentType returns the value of ContentType.
func (s *GetPageThumbnailImageOKHeaders) GetContentType() string {
	return s.ContentType
}

// GetResponse returns the value of Response.
func (s *GetPageThumbnailImageOKHeaders) GetResponse() GetPageThumbnailImageOK {
	return s.Response
}

// SetContentType sets the value of ContentType.
func (s *GetPageThumbnailImageOKHeaders) SetContentType(val string) {
	s.ContentType = val
}

// SetResponse sets the value of Response.
func (s *GetPageThumbnailImageOKHeaders) SetResponse(val GetPageThumbnailImageOK) {
	s.Response = val
}

// Ref: #/components/schemas/Image
type Image struct {
	T string `json:"t"`
	// Width of image.
	W OptInt `json:"w"`
	// Height of image.
	H OptInt `json:"h"`
}

// GetT returns the value of T.
func (s *Image) GetT() string {
	return s.T
}

// GetW returns the value of W.
func (s *Image) GetW() OptInt {
	return s.W
}

// GetH returns the value of H.
func (s *Image) GetH() OptInt {
	return s.H
}

// SetT sets the value of T.
func (s *Image) SetT(val string) {
	s.T = val
}

// SetW sets the value of W.
func (s *Image) SetW(val OptInt) {
	s.W = val
}

// SetH sets the value of H.
func (s *Image) SetH(val OptInt) {
	s.H = val
}

// Ref: #/components/schemas/Images
type Images struct {
	Pages     []Image  `json:"pages"`
	Cover     OptImage `json:"cover"`
	Thumbnail OptImage `json:"thumbnail"`
}

// GetPages returns the value of Pages.
func (s *Images) GetPages() []Image {
	return s.Pages
}

// GetCover returns the value of Cover.
func (s *Images) GetCover() OptImage {
	return s.Cover
}

// GetThumbnail returns the value of Thumbnail.
func (s *Images) GetThumbnail() OptImage {
	return s.Thumbnail
}

// SetPages sets the value of Pages.
func (s *Images) SetPages(val []Image) {
	s.Pages = val
}

// SetCover sets the value of Cover.
func (s *Images) SetCover(val OptImage) {
	s.Cover = val
}

// SetThumbnail sets the value of Thumbnail.
func (s *Images) SetThumbnail(val OptImage) {
	s.Thumbnail = val
}

// NewOptImage returns new OptImage with value set to v.
func NewOptImage(v Image) OptImage {
	return OptImage{
		Value: v,
		Set:   true,
	}
}

// OptImage is optional Image.
type OptImage struct {
	Value Image
	Set   bool
}

// IsSet returns true if OptImage was set.
func (o OptImage) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptImage) Reset() {
	var v Image
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptImage) SetTo(v Image) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptImage) Get() (v Image, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptImage) Or(d Image) Image {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// SetNull sets value to null.
func (o *OptNilString) SetToNull() {
	o.Set = true
	o.Null = true
	var v string
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptUnixSeconds returns new OptUnixSeconds with value set to v.
func NewOptUnixSeconds(v time.Time) OptUnixSeconds {
	return OptUnixSeconds{
		Value: v,
		Set:   true,
	}
}

// OptUnixSeconds is optional time.Time.
type OptUnixSeconds struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptUnixSeconds was set.
func (o OptUnixSeconds) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptUnixSeconds) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptUnixSeconds) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptUnixSeconds) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptUnixSeconds) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/SearchResponse
type SearchResponse struct {
	Result []Book `json:"result"`
	// Total number of pages.
	NumPages OptInt `json:"num_pages"`
	// Elements on one page.
	PerPage OptInt `json:"per_page"`
}

// GetResult returns the value of Result.
func (s *SearchResponse) GetResult() []Book {
	return s.Result
}

// GetNumPages returns the value of NumPages.
func (s *SearchResponse) GetNumPages() OptInt {
	return s.NumPages
}

// GetPerPage returns the value of PerPage.
func (s *SearchResponse) GetPerPage() OptInt {
	return s.PerPage
}

// SetResult sets the value of Result.
func (s *SearchResponse) SetResult(val []Book) {
	s.Result = val
}

// SetNumPages sets the value of NumPages.
func (s *SearchResponse) SetNumPages(val OptInt) {
	s.NumPages = val
}

// SetPerPage sets the value of PerPage.
func (s *SearchResponse) SetPerPage(val OptInt) {
	s.PerPage = val
}

// Ref: #/components/schemas/Tag
type Tag struct {
	ID    int       `json:"id"`
	Type  TagType   `json:"type"`
	Name  string    `json:"name"`
	URL   OptString `json:"url"`
	Count OptInt    `json:"count"`
}

// GetID returns the value of ID.
func (s *Tag) GetID() int {
	return s.ID
}

// GetType returns the value of Type.
func (s *Tag) GetType() TagType {
	return s.Type
}

// GetName returns the value of Name.
func (s *Tag) GetName() string {
	return s.Name
}

// GetURL returns the value of URL.
func (s *Tag) GetURL() OptString {
	return s.URL
}

// GetCount returns the value of Count.
func (s *Tag) GetCount() OptInt {
	return s.Count
}

// SetID sets the value of ID.
func (s *Tag) SetID(val int) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *Tag) SetType(val TagType) {
	s.Type = val
}

// SetName sets the value of Name.
func (s *Tag) SetName(val string) {
	s.Name = val
}

// SetURL sets the value of URL.
func (s *Tag) SetURL(val OptString) {
	s.URL = val
}

// SetCount sets the value of Count.
func (s *Tag) SetCount(val OptInt) {
	s.Count = val
}

type TagType string

const (
	TagTypeParody    TagType = "parody"
	TagTypeCharacter TagType = "character"
	TagTypeTag       TagType = "tag"
	TagTypeArtist    TagType = "artist"
	TagTypeGroup     TagType = "group"
	TagTypeCategory  TagType = "category"
	TagTypeLanguage  TagType = "language"
)

// AllValues returns all TagType values.
func (TagType) AllValues() []TagType {
	return []TagType{
		TagTypeParody,
		TagTypeCharacter,
		TagTypeTag,
		TagTypeArtist,
		TagTypeGroup,
		TagTypeCategory,
		TagTypeLanguage,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s TagType) MarshalText() ([]byte, error) {
	switch s {
	case TagTypeParody:
		return []byte(s), nil
	case TagTypeCharacter:
		return []byte(s), nil
	case TagTypeTag:
		return []byte(s), nil
	case TagTypeArtist:
		return []byte(s), nil
	case TagTypeGroup:
		return []byte(s), nil
	case TagTypeCategory:
		return []byte(s), nil
	case TagTypeLanguage:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *TagType) UnmarshalText(data []byte) error {
	switch TagType(data) {
	case TagTypeParody:
		*s = TagTypeParody
		return nil
	case TagTypeCharacter:
		*s = TagTypeCharacter
		return nil
	case TagTypeTag:
		*s = TagTypeTag
		return nil
	case TagTypeArtist:
		*s = TagTypeArtist
		return nil
	case TagTypeGroup:
		*s = TagTypeGroup
		return nil
	case TagTypeCategory:
		*s = TagTypeCategory
		return nil
	case TagTypeLanguage:
		*s = TagTypeLanguage
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/Title
type Title struct {
	English  OptNilString `json:"english"`
	Japanese OptNilString `json:"japanese"`
	Pretty   OptNilString `json:"pretty"`
}

// GetEnglish returns the value of English.
func (s *Title) GetEnglish() OptNilString {
	return s.English
}

// GetJapanese returns the value of Japanese.
func (s *Title) GetJapanese() OptNilString {
	return s.Japanese
}

// GetPretty returns the value of Pretty.
func (s *Title) GetPretty() OptNilString {
	return s.Pretty
}

// SetEnglish sets the value of English.
func (s *Title) SetEnglish(val OptNilString) {
	s.English = val
}

// SetJapanese sets the value of Japanese.
func (s *Title) SetJapanese(val OptNilString) {
	s.Japanese = val
}

// SetPretty sets the value of Pretty.
func (s *Title) SetPretty(val OptNilString) {
	s.Pretty = val
}
